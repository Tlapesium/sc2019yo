#include <bits/stdc++.h>
#include "sc1.h"
using namespace std;
#define MAX(a_, b_) ((a_) > (b_) ? (a_) : (b_))

//   debug shrine
// ################
//   ##        ##
//  ##############
//   ##        ##
//   ##        ##
//   ##        ##
//   ##        ##

int in[10], out[10]; //入出力データ
int8_t v[10][6][7]; //NNの頂点
int8_t v_[10][6][7];
int8_t d[200][218];
int memo[10]; //メモ
int memo_[10];

constexpr int old_to_nd[217] = {
	0, 6, 12, 18, 24, 30, 36, 1, 7, 13, 19, 25, 31, 37, 2, 8, 14, 20, 26, 32, 38, 3, 9, 15, 21, 27, 33, 39, 4, 10, 16, 22, 28, 34, 40, 5, 11, 17, 23, 29, 35, 41, 42, 49, 56, 63, 70, 77, 84, 43, 50, 57, 64, 71, 78, 85, 44, 51, 58, 65, 72, 79, 86, 45, 52, 59, 66, 73, 80, 87, 46, 53, 60, 67, 74, 81, 88, 47, 54, 61, 68, 75, 82, 89, 48, 55, 62, 69, 76, 83, 90, 91, 98, 105, 112, 119, 126, 133, 92, 99, 106, 113, 120, 127, 134, 93, 100, 107, 114, 121, 128, 135, 94, 101, 108, 115, 122, 129, 136, 95, 102, 109, 116, 123, 130, 137, 96, 103, 110, 117, 124, 131, 138, 97, 104, 111, 118, 125, 132, 139, 140, 147, 154, 161, 168, 175, 182, 141, 148, 155, 162, 169, 176, 183, 142, 149, 156, 163, 170, 177, 184, 143, 150, 157, 164, 171, 178, 185, 144, 151, 158, 165, 172, 179, 186, 145, 152, 159, 166, 173, 180, 187, 146, 153, 160, 167, 174, 181, 188, 189, 196, 203, 210, 190, 197, 204, 211, 191, 198, 205, 212, 192, 199, 206, 213, 193, 200, 207, 214, 194, 201, 208, 215, 195, 202, 209, 216
};

constexpr int nd_to_old[217] = {
	0, 7, 14, 21, 28, 35, 1, 8, 15, 22, 29, 36, 2, 9, 16, 23, 30, 37, 3, 10, 17, 24, 31, 38, 4, 11, 18, 25, 32, 39, 5, 12, 19, 26, 33, 40, 6, 13, 20, 27, 34, 41, 42, 49, 56, 63, 70, 77, 84, 43, 50, 57, 64, 71, 78, 85, 44, 51, 58, 65, 72, 79, 86, 45, 52, 59, 66, 73, 80, 87, 46, 53, 60, 67, 74, 81, 88, 47, 54, 61, 68, 75, 82, 89, 48, 55, 62, 69, 76, 83, 90, 91, 98, 105, 112, 119, 126, 133, 92, 99, 106, 113, 120, 127, 134, 93, 100, 107, 114, 121, 128, 135, 94, 101, 108, 115, 122, 129, 136, 95, 102, 109, 116, 123, 130, 137, 96, 103, 110, 117, 124, 131, 138, 97, 104, 111, 118, 125, 132, 139, 140, 147, 154, 161, 168, 175, 182, 141, 148, 155, 162, 169, 176, 183, 142, 149, 156, 163, 170, 177, 184, 143, 150, 157, 164, 171, 178, 185, 144, 151, 158, 165, 172, 179, 186, 145, 152, 159, 166, 173, 180, 187, 146, 153, 160, 167, 174, 181, 188, 189, 193, 197, 201, 205, 209, 213, 190, 194, 198, 202, 206, 210, 214, 191, 195, 199, 203, 207, 211, 215, 192, 196, 200, 204, 208, 212, 216
};

constexpr int ne[5][7][7] = {
	0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 217, 217, 217, 217, 217, 217, 217, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 217, 217, 217, 193, 194, 195, 196, 217, 217, 217, 197, 198, 199, 200, 217, 217, 217, 201, 202, 203, 204, 217, 217, 217, 205, 206, 207, 208, 217, 217, 217, 209, 210, 211, 212, 217, 217, 217, 213, 214, 215, 216, 217, 217, 217
};

constexpr int nto_t[217][3] = {
	0, 0, 0, 0, 0, 1, 0, 0, 2, 0, 0, 3, 0, 0, 4, 0, 0, 5, 0, 0, 6, 0, 1, 0, 0, 1, 1, 0, 1, 2, 0, 1, 3, 0, 1, 4, 0, 1, 5, 0, 1, 6, 0, 2, 0, 0, 2, 1, 0, 2, 2, 0, 2, 3, 0, 2, 4, 0, 2, 5, 0, 2, 6, 0, 3, 0, 0, 3, 1, 0, 3, 2, 0, 3, 3, 0, 3, 4, 0, 3, 5, 0, 3, 6, 0, 4, 0, 0, 4, 1, 0, 4, 2, 0, 4, 3, 0, 4, 4, 0, 4, 5, 0, 4, 6, 0, 5, 0, 0, 5, 1, 0, 5, 2, 0, 5, 3, 0, 5, 4, 0, 5, 5, 0, 5, 6, 1, 0, 0, 1, 0, 1, 1, 0, 2, 1, 0, 3, 1, 0, 4, 1, 0, 5, 1, 0, 6, 1, 1, 0, 1, 1, 1, 1, 1, 2, 1, 1, 3, 1, 1, 4, 1, 1, 5, 1, 1, 6, 1, 2, 0, 1, 2, 1, 1, 2, 2, 1, 2, 3, 1, 2, 4, 1, 2, 5, 1, 2, 6, 1, 3, 0, 1, 3, 1, 1, 3, 2, 1, 3, 3, 1, 3, 4, 1, 3, 5, 1, 3, 6, 1, 4, 0, 1, 4, 1, 1, 4, 2, 1, 4, 3, 1, 4, 4, 1, 4, 5, 1, 4, 6, 1, 5, 0, 1, 5, 1, 1, 5, 2, 1, 5, 3, 1, 5, 4, 1, 5, 5, 1, 5, 6, 1, 6, 0, 1, 6, 1, 1, 6, 2, 1, 6, 3, 1, 6, 4, 1, 6, 5, 1, 6, 6, 2, 0, 0, 2, 0, 1, 2, 0, 2, 2, 0, 3, 2, 0, 4, 2, 0, 5, 2, 0, 6, 2, 1, 0, 2, 1, 1, 2, 1, 2, 2, 1, 3, 2, 1, 4, 2, 1, 5, 2, 1, 6, 2, 2, 0, 2, 2, 1, 2, 2, 2, 2, 2, 3, 2, 2, 4, 2, 2, 5, 2, 2, 6, 2, 3, 0, 2, 3, 1, 2, 3, 2, 2, 3, 3, 2, 3, 4, 2, 3, 5, 2, 3, 6, 2, 4, 0, 2, 4, 1, 2, 4, 2, 2, 4, 3, 2, 4, 4, 2, 4, 5, 2, 4, 6, 2, 5, 0, 2, 5, 1, 2, 5, 2, 2, 5, 3, 2, 5, 4, 2, 5, 5, 2, 5, 6, 2, 6, 0, 2, 6, 1, 2, 6, 2, 2, 6, 3, 2, 6, 4, 2, 6, 5, 2, 6, 6, 3, 0, 0, 3, 0, 1, 3, 0, 2, 3, 0, 3, 3, 0, 4, 3, 0, 5, 3, 0, 6, 3, 1, 0, 3, 1, 1, 3, 1, 2, 3, 1, 3, 3, 1, 4, 3, 1, 5, 3, 1, 6, 3, 2, 0, 3, 2, 1, 3, 2, 2, 3, 2, 3, 3, 2, 4, 3, 2, 5, 3, 2, 6, 3, 3, 0, 3, 3, 1, 3, 3, 2, 3, 3, 3, 3, 3, 4, 3, 3, 5, 3, 3, 6, 3, 4, 0, 3, 4, 1, 3, 4, 2, 3, 4, 3, 3, 4, 4, 3, 4, 5, 3, 4, 6, 3, 5, 0, 3, 5, 1, 3, 5, 2, 3, 5, 3, 3, 5, 4, 3, 5, 5, 3, 5, 6, 3, 6, 0, 3, 6, 1, 3, 6, 2, 3, 6, 3, 3, 6, 4, 3, 6, 5, 3, 6, 6, 4, 0, 0, 4, 0, 1, 4, 0, 2, 4, 0, 3, 4, 1, 0, 4, 1, 1, 4, 1, 2, 4, 1, 3, 4, 2, 0, 4, 2, 1, 4, 2, 2, 4, 2, 3, 4, 3, 0, 4, 3, 1, 4, 3, 2, 4, 3, 3, 4, 4, 0, 4, 4, 1, 4, 4, 2, 4, 4, 3, 4, 5, 0, 4, 5, 1, 4, 5, 2, 4, 5, 3, 4, 6, 0, 4, 6, 1, 4, 6, 2, 4, 6, 3
};

//NNシミュレーション
int nn(int8_t* input_j, int input, int n) {
	int tmp;
	for (int i = 0; i < 6; i++)for (int j = 0; j < 7; j++)v[n][i][j] = 0;
	for (int j = 0; j < 6; j++) {
		v[n][0][j] = (input >> j & 1);
		for (int k = 0; k < 7; k++) {
			v[n][1][k] += v[n][0][j] * input_j[ne[0][j][k]];
		}
	}
	for (int j = 1; j < 5; j++) {
		for (int k = 0; k < 7; k++) {

			if (v[n][j][k] <= 0)tmp = 0;
			else tmp = 1;

			for (int s = 0; s < 7; s++) {
				v[n][j + 1][s] += tmp * input_j[ne[j][k][s]];
			}
		}
	}

	int ans = 0;
	for (int j = 0; j < 4; j++) {
		if (v[n][5][j] <= 0)continue;
		else ans += (1 << j);
	}
	return ans;

}

//評価値全計算
int eval(int8_t* input_j, int input, int out, int n) {
	nn(input_j, input, n);
	int ans = 0;
	for (int j = 0; j < 4; j++) {
		if (out >> j & 1) {
			ans += MAX(0, -v[n][5][j] + 1);
		}
		else {
			ans += MAX(0, v[n][5][j]);
		}
	}
	return ans;
}

//NN差分更新
//この関数が呼ばれたらそのノードに変更あり
void d_nn(int n, int a, int b, int8_t* input_j) {
	if (a == 4) {
		if (v_[n][a][b] > 0) {
			for (int i = 0, j = ne[a][b][0]; i < 7; i++, j++) {
				v_[n][a + 1][i] += input_j[j];
			}
		}
		else {
			for (int i = 0, j = ne[a][b][0]; i < 7; i++, j++) {
				v_[n][a + 1][i] -= input_j[j];
			}
		}
		return;
	}
	if (v_[n][a][b] > 0) { // 0 -> 1
		for (int i = 0, j = ne[a][b][0]; i < 7; i++, j++) {
			v_[n][a + 1][i] += input_j[j];
			if (v_[n][a + 1][i] - input_j[j] <= 0) {
				if (v_[n][a + 1][i] > 0) {
					d_nn(n, a + 1, i, input_j);
				}
			}
			else {
				if (v_[n][a + 1][i] <= 0) {
					d_nn(n, a + 1, i, input_j);
				}
			}
		}
	}
	else { // 1 -> 0
		for (int i = 0, j = ne[a][b][0]; i < 7; i++, j++) {
			v_[n][a + 1][i] -= input_j[j];
			if (v_[n][a + 1][i] + input_j[j] <= 0) {
				if (v_[n][a + 1][i] > 0) {
					d_nn(n, a + 1, i, input_j);
				}
			}
			else {
				if (v_[n][a + 1][i] <= 0) {
					d_nn(n, a + 1, i, input_j);
				}
			}
		}
	}
}

//評価値差分計算
inline int eval_dif(int8_t* input_j, int input, int out, int n, int pos) {
	int p = nto_t[pos][0], q = nto_t[pos][1], r = nto_t[pos][2];
	bool flag = false;
	if (v_[n][p][q] > 0) { //元が1だった
		flag = true;
		if (v_[n][p + 1][r] <= 0) {
			v_[n][p + 1][r] -= 2 * input_j[pos]; //差分は-1なら+1,+1なら-1になる
			if (v_[n][p + 1][r] > 0) { //変更した結果先のノードが変わった
				if (p + 1 != 5) {
					d_nn(n, p + 1, r, input_j); //伝搬させる
				}
			}
		}
		else {
			v_[n][p + 1][r] -= 2 * input_j[pos];
			if (v_[n][p + 1][r] <= 0) {
				if (p + 1 != 5) {
					d_nn(n, p + 1, r, input_j);
				}
			}
		}
	}
	if (!flag)return memo[n];
	int ans = 0;
	for (int j = 0; j < 4; j++) {
		if (out >> j & 1) {
			ans += MAX(0, -v_[n][5][j] + 1);
		}
		else {
			ans += MAX(0, v_[n][5][j]);
		}
	}
	return ans;
}

void solve() {
	int m = 100;
	int8_t j_[218];
	j_[217] = 0;

	vector<pair<int, int>> gt(200);

	for (int n = 0; n < 200; n++) {
		for (int i = 0; i < 217; i++) {
			if (genrand_int31() % 2 == 0)j_[i] = -1;
			else j_[i] = 1;
		}

		int tmp = 0;
		for (int i = 0; i < 10; i++) {
			tmp += (eval(j_, in[i], out[i], i));
		}
		gt[n] = { tmp,n };
		memcpy(d[n], j_, sizeof(j_));
	}

	sort(gt.begin(), gt.end());

	int a = 0, b = 0, c = 0;
	memcpy(j_, d[gt[c].second], sizeof(d[gt[c].second]));

	for (int i = 0; i < 10; i++) {
		memo[i] = eval(j_, in[i], out[i], i);//NNの頂点情報を全更新
		memo_[i] = memo[i];
	}

	int tmp, rnd;

	while (m != 0) {
		a++;
		if (a > 10000000)break; //fail safe
		if (a - b > 61500) {
			b = a;
			c++;
			memcpy(j_, d[gt[c].second], sizeof(d[gt[c].second]));
			m = gt[c].first;
			for (int i = 0; i < 10; i++) {
				memo[i] = eval(j_, in[i], out[i], i);//NNの頂点情報を全更新
				memo_[i] = memo[i];
			}
		}

		memcpy(v_, v, sizeof(v));
		memcpy(memo_, memo, sizeof(memo));

		tmp = 0;
		rnd = genrand_int31() % 217;

		for (int i = 0; i < 10; i++) {
			memo_[i] = (eval_dif(j_, in[i], out[i], i, rnd));
			tmp += memo_[i];
		}
		if (m >= tmp) {
			if (m > tmp) {
				b = a;
				m = tmp;
			}
			j_[rnd] *= -1;
			memcpy(v, v_, sizeof(v_));
			memcpy(memo, memo_, sizeof(memo_));
			continue;
		}
	}

	for (int i = 0; i < 217; i++) SC_J[i] = j_[nd_to_old[i]];
	SC_output();

}

int main() {
	SC_input();
	init_genrand(114514);
	for (int n = 0; n < SC_n; n++) {
		for (int i = 0; i < 20; i++) {
			if (i % 2 == 0)in[i / 2] = SC_prob[n][i];
			else out[i / 2] = SC_prob[n][i];
		}
		solve();
	}
}